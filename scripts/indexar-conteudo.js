require('dotenv').config();
const algoliasearch = require('algoliasearch');
const fs = require('fs');
const path = require('path');
const matter = require('front-matter');

// Importar a fun√ß√£o buildIndexName para garantir consist√™ncia com o componente de busca
const { buildIndexName } = require('../src/utils/indexer/consts');

// Configura√ß√µes
const MAX_RETRIES = 3;
const RETRY_DELAY = 2000;

// Log das vari√°veis de ambiente
console.log('Vari√°veis de ambiente:');
console.log('NEXT_PUBLIC_ALGOLIA_APP_ID:', process.env.NEXT_PUBLIC_ALGOLIA_APP_ID);
console.log('ALGOLIA_ADMIN_API_KEY:', process.env.ALGOLIA_ADMIN_API_KEY ? '‚úì Definida' : '‚úó N√£o definida');

// Inicializar cliente Algolia
const client = algoliasearch(
  process.env.NEXT_PUBLIC_ALGOLIA_APP_ID,
  process.env.ALGOLIA_ADMIN_API_KEY
);

// Usar a fun√ß√£o buildIndexName que agora sempre retorna "development_mcpx_content"
const indexName = buildIndexName();
console.log(`üîç Usando √≠ndice Algolia: ${indexName}`);
const index = client.initIndex(indexName);

// Diret√≥rio base para conte√∫do
const CONTENT_BASE_DIR = 'content/pages';
// Diret√≥rio espec√≠fico para artigos MCPX conforme regra 06
const MCPX_DIR = 'mcpx';

// Fun√ß√£o de espera
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Fun√ß√£o para obter todos os IDs de objetos atualmente no Algolia
async function obterIdsObjetosExistentes() {
  try {
    console.log('üîç Obtendo lista de objetos existentes no Algolia...');
    
    const idsExistentes = [];
    
    // Buscar todos os objetos do √≠ndice - usando m√©todo mais compat√≠vel
    let page = 0;
    let hits = [];
    
    do {
      const { hits: resultados, nbPages } = await index.search('', {
        page: page,
        hitsPerPage: 1000, // Obter o m√°ximo de resultados por p√°gina
      });
      
      hits = resultados;
      hits.forEach(hit => {
        idsExistentes.push(hit.objectID);
      });
      
      page++;
      
      // Sair do loop quando chegarmos √† √∫ltima p√°gina
      if (page >= nbPages) break;
      
    } while (hits.length > 0);
    
    console.log(`‚úÖ Encontrados ${idsExistentes.length} objetos no √≠ndice Algolia`);
    return idsExistentes;
  } catch (error) {
    console.error('‚ùå Erro ao obter objetos existentes:', error.message);
    return [];
  }
}

// Fun√ß√£o para extrair objetos de documentos para indexa√ß√£o
async function extrairObjetosParaIndexacao() {
  const objects = [];
  const objectIDs = []; // Armazenar IDs de objetos extra√≠dos
  const baseDirPath = path.join(process.cwd(), CONTENT_BASE_DIR);
  const mcpxDirPath = path.join(baseDirPath, MCPX_DIR);

  if (!fs.existsSync(mcpxDirPath)) {
    console.log(`‚ùå Diret√≥rio MCPX ${MCPX_DIR} n√£o encontrado em ${CONTENT_BASE_DIR}`);
    return { objects: [], objectIDs: [] };
  }

  console.log(`üìÅ Lendo artigos do diret√≥rio: ${MCPX_DIR}`);

  // Processar apenas os arquivos da pasta mcpx
  const files = fs.readdirSync(mcpxDirPath);

  files.forEach(file => {
    // Ignorar arquivos index.md
    if (file === 'index.md') {
      return;
    }

    const filePath = path.join(mcpxDirPath, file);
    const stat = fs.statSync(filePath);

    if (!stat.isDirectory() && file.endsWith('.md')) {
      try {
        const content = fs.readFileSync(filePath, 'utf-8');
        const { attributes, body } = matter(content);
        
        // Gerar slug e permalink
        const slug = attributes.slug || path.basename(file, '.md');
        
        // Usar o caminho sem o prefixo /content/ para mcpx
        const permalink = `/${MCPX_DIR}/${slug}`;

        // Gerar ID √∫nico para o objeto
        const objectID = `${MCPX_DIR}_${slug}`;
        
        // Adicionar o ID √† lista de IDs ativos
        objectIDs.push(objectID);

        // Criar objeto para indexa√ß√£o
        const object = {
          objectID,
          title: attributes.title || '',
          content: body,
          excerpt: attributes.excerpt || body.substring(0, 160) + '...',
          date: attributes.date ? new Date(attributes.date).getTime() : null,
          categories: attributes.categories || [],
          permalink: permalink,
          fullPath: permalink,
          featuredImage: attributes.featuredImage?.url || attributes.media?.url || null,
          author: attributes.author || null,
          timeToRead: Math.ceil(body.split(/\s+/).length / 200)
        };

        objects.push(object);
        console.log(`üìÑ Processado: ${file}`);
      } catch (error) {
        console.error(`‚ùå Erro ao processar arquivo ${file}:`, error.message);
      }
    }
    // Verificar e processar diret√≥rios (subpastas dentro de mcpx)
    else if (stat.isDirectory()) {
      const subdir = file;
      const subdirPath = path.join(mcpxDirPath, subdir);
      const subdirFiles = fs.readdirSync(subdirPath);
      
      console.log(`üìÅ Processando subdiret√≥rio: ${subdir}`);
      
      subdirFiles.forEach(subdirFile => {
        if (subdirFile === 'index.md') return;
        
        const subdirFilePath = path.join(subdirPath, subdirFile);
        try {
          if (fs.statSync(subdirFilePath).isFile() && subdirFile.endsWith('.md')) {
            const content = fs.readFileSync(subdirFilePath, 'utf-8');
            const { attributes, body } = matter(content);
            
            // Gerar slug e permalink para arquivos em subdiret√≥rios
            const slug = attributes.slug || path.basename(subdirFile, '.md');
            
            // Usar o caminho sem o prefixo /content/ para mcpx
            const permalink = `/${MCPX_DIR}/${subdir}/${slug}`;
            
            // Gerar ID √∫nico para o objeto
            const objectID = `${MCPX_DIR}_${subdir}_${slug}`;
            
            // Adicionar o ID √† lista de IDs ativos
            objectIDs.push(objectID);
            
            const object = {
              objectID,
              title: attributes.title || '',
              content: body,
              excerpt: attributes.excerpt || body.substring(0, 160) + '...',
              date: attributes.date ? new Date(attributes.date).getTime() : null,
              categories: attributes.categories || [],
              permalink: permalink,
              fullPath: permalink,
              subdirectory: subdir,
              featuredImage: attributes.featuredImage?.url || attributes.media?.url || null,
              author: attributes.author || null,
              timeToRead: Math.ceil(body.split(/\s+/).length / 200)
            };
            
            objects.push(object);
            console.log(`üìÑ Processado: ${subdir}/${subdirFile}`);
          }
        } catch (error) {
          console.error(`‚ùå Erro ao processar arquivo ${subdir}/${subdirFile}:`, error.message);
        }
      });
    }
  });

  return { objects, objectIDs };
}

// Fun√ß√£o para identificar objetos a serem removidos (existem no Algolia mas n√£o mais nos arquivos)
function identificarObjetosParaRemover(idsExistentes, idsAtuais) {
  // Filtrar IDs que existem no Algolia mas n√£o est√£o mais na lista atual
  const idsParaRemover = idsExistentes.filter(id => !idsAtuais.includes(id));
  
  if (idsParaRemover.length > 0) {
    console.log(`üóëÔ∏è Encontrados ${idsParaRemover.length} objetos para remover do Algolia`);
  } else {
    console.log('‚úÖ Nenhum objeto para remover do Algolia');
  }
  
  return idsParaRemover;
}

// Fun√ß√£o para salvar objetos no Algolia com retry
async function salvarNoAlgoliaComRetry(objects) {
  let tentativa = 0;
  let ultimoErro = null;

  while (tentativa < MAX_RETRIES) {
    try {
      tentativa++;
      console.log(`üîÑ Tentativa ${tentativa} de indexa√ß√£o no Algolia...`);

      const { objectIDs } = await index.saveObjects(objects);
      
      console.log(`\n‚úÖ Indexados ${objectIDs.length} documentos no Algolia`);
      console.log('üìÑ Documentos indexados:');
      
      // Imprimir resumo dos documentos indexados
      objects.forEach(obj => {
        console.log(`- ${obj.title}`);
        console.log(`  URL: ${obj.permalink}`);
        console.log(`  Categorias: ${obj.categories.join(', ')}`);
        console.log('---');
      });
      
      return true;
    } catch (error) {
      ultimoErro = error;
      console.error(`‚ùå Erro na tentativa ${tentativa}:`, error.message);
      
      if (tentativa < MAX_RETRIES) {
        console.log(`‚è≥ Aguardando ${RETRY_DELAY/1000} segundos antes de tentar novamente...`);
        await sleep(RETRY_DELAY);
      }
    }
  }
  
  // Se chegou aqui, todas as tentativas falharam
  console.error(`‚ùå Falha ap√≥s ${MAX_RETRIES} tentativas. √öltimo erro:`, ultimoErro.message);
  return false;
}

// Fun√ß√£o para remover objetos do Algolia com retry
async function removerDoAlgoliaComRetry(objectIDs) {
  if (objectIDs.length === 0) return true;
  
  let tentativa = 0;
  let ultimoErro = null;

  while (tentativa < MAX_RETRIES) {
    try {
      tentativa++;
      console.log(`üîÑ Tentativa ${tentativa} de remo√ß√£o no Algolia...`);

      await index.deleteObjects(objectIDs);
      
      console.log(`\n‚úÖ Removidos ${objectIDs.length} documentos do Algolia`);
      console.log('üóëÔ∏è IDs removidos:', objectIDs);
      
      return true;
    } catch (error) {
      ultimoErro = error;
      console.error(`‚ùå Erro na tentativa ${tentativa} de remo√ß√£o:`, error.message);
      
      if (tentativa < MAX_RETRIES) {
        console.log(`‚è≥ Aguardando ${RETRY_DELAY/1000} segundos antes de tentar novamente...`);
        await sleep(RETRY_DELAY);
      }
    }
  }
  
  // Se chegou aqui, todas as tentativas falharam
  console.error(`‚ùå Falha ap√≥s ${MAX_RETRIES} tentativas de remo√ß√£o. √öltimo erro:`, ultimoErro.message);
  return false;
}

// Fun√ß√£o para salvar registro de indexa√ß√£o (pode ser expandida para salvar em arquivo/BD)
function salvarRegistroDeIndexacao(registro) {
  try {
    const registroDir = path.join(process.cwd(), '.algolia');
    if (!fs.existsSync(registroDir)) {
      fs.mkdirSync(registroDir, { recursive: true });
    }
    
    const registroPath = path.join(registroDir, 'last-index.json');
    fs.writeFileSync(registroPath, JSON.stringify(registro, null, 2));
    console.log(`üìù Registro de indexa√ß√£o salvo em ${registroPath}`);
  } catch (error) {
    console.error('‚ùå Erro ao salvar registro de indexa√ß√£o:', error.message);
  }
}

// Fun√ß√£o principal de indexa√ß√£o
async function indexarConteudo() {
  try {
    // Verificar se as vari√°veis de ambiente necess√°rias est√£o definidas
    if (!process.env.NEXT_PUBLIC_ALGOLIA_APP_ID || !process.env.ALGOLIA_ADMIN_API_KEY) {
      console.warn('‚ö†Ô∏è Vari√°veis de ambiente do Algolia n√£o encontradas. Pulando indexa√ß√£o.');
      console.warn('Defina NEXT_PUBLIC_ALGOLIA_APP_ID e ALGOLIA_ADMIN_API_KEY para habilitar a indexa√ß√£o.');
      
      // Salvar registro de erro de configura√ß√£o
      salvarRegistroDeIndexacao({
        success: false,
        error: 'Vari√°veis de ambiente do Algolia n√£o configuradas',
        timestamp: new Date().toISOString()
      });
      
      return; // Sai da fun√ß√£o sem falhar o build
    }

    // Configurar os atributos conforme especificado na regra 06-algolia
    await index.setSettings({
      // Atributos pesquis√°veis conforme regra 06
      searchableAttributes: [
        'title',
        'content',
        'excerpt',
        'categories'
      ],
      // Atributos para faceting conforme regra 06
      attributesForFaceting: [
        'categories'
      ],
      // Ordena√ß√£o personalizada conforme regra 06
      customRanking: [
        'desc(date)'
      ]
    });

    // 1. Obter lista de objetos existentes no Algolia
    const idsExistentes = await obterIdsObjetosExistentes();
    
    // 2. Extrair objetos dos arquivos Markdown
    const { objects, objectIDs } = await extrairObjetosParaIndexacao();
    
    // 3. Identificar objetos a serem removidos
    const idsParaRemover = identificarObjetosParaRemover(idsExistentes, objectIDs);
    
    let sucessoRemocao = true;
    let sucessoIndexacao = true;
    
    // 4. Remover objetos que n√£o existem mais
    if (idsParaRemover.length > 0) {
      sucessoRemocao = await removerDoAlgoliaComRetry(idsParaRemover);
    }

    // 5. Indexar os objetos atuais no Algolia com retry
    if (objects.length > 0) {
      sucessoIndexacao = await salvarNoAlgoliaComRetry(objects);
    } else {
      console.log('‚ö†Ô∏è Nenhum conte√∫do encontrado para indexar');
    }
    
    // 6. Salvar registro do processo de sincroniza√ß√£o
    salvarRegistroDeIndexacao({
      success: sucessoIndexacao && sucessoRemocao,
      adicionados: objects.length,
      removidos: idsParaRemover.length,
      total: idsExistentes.length - idsParaRemover.length + objects.length,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erro ao indexar conte√∫do:', error);
    console.error('Detalhes do erro:', error.message);
    
    // Salvar registro de erro
    salvarRegistroDeIndexacao({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
    
    // Adicionado: n√£o falha o processo com c√≥digo de erro
    console.warn('‚ö†Ô∏è A indexa√ß√£o falhou, mas o build continuar√°. Por favor, verifique os logs e execute a indexa√ß√£o manualmente se necess√°rio.');
  }
}

// Executar a indexa√ß√£o
console.log('üöÄ Iniciando processo de indexa√ß√£o no Algolia...');
indexarConteudo(); 